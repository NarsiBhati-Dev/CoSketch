generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())

  ownedRooms Room[]        @relation("RoomAdmins")  // ✅ Rooms where user is admin
  // rooms      RoomMembers[] // ✅ Many-to-many room membership
  canvases   Canvas[]      // ✅ Canvases created by the user
  Room Room[] @relation("RoomUsers")
}

model Room {
  id        String   @id @default(uuid())
  slug      String   @unique
  adminId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  admin     User     @relation("RoomAdmins", fields: [adminId], references: [id], onDelete: Cascade)
  // members   RoomMembers[] // ✅ Many-to-many relationship
  canvases  Canvas[]
  member User[] @relation("RoomUsers")
}

// model RoomMembers {
//   id     String @id @default(uuid())
//   userId String
//   roomId String

//   // user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   room   Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

//   @@unique([userId, roomId]) // ✅ Ensures a user joins a room only once
// }

model Canvas {
  id        Int      @id @default(autoincrement())
  design    String   
  roomId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  

  room      Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
}